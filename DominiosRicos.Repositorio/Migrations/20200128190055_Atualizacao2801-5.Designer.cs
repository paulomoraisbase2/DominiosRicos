// <auto-generated />
using System;
using DominiosRicos.Repositorio.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DominiosRicos.Repositorio.Migrations
{
    [DbContext(typeof(DominiosRicosContexto))]
    [Migration("20200128190055_Atualizacao2801-5")]
    partial class Atualizacao28015
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Anamnese", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Anamneses");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Auditoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acao");

                    b.Property<DateTime>("DataExecucao");

                    b.Property<string>("NovoValor");

                    b.Property<Guid>("RegistroId");

                    b.Property<string>("RegistroTabela");

                    b.Property<Guid>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Auditorias");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Clinica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(180);

                    b.Property<string>("Schema");

                    b.HasKey("Id");

                    b.ToTable("Clinica","public");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.ClinicaTelefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClinicaId");

                    b.HasKey("Id");

                    b.HasIndex("ClinicaId");

                    b.ToTable("ClinicaTelefone","public");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Dentista", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(180);

                    b.HasKey("Id");

                    b.ToTable("Dentista","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.DentistaTelefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DentistaId");

                    b.HasKey("Id");

                    b.HasIndex("DentistaId");

                    b.ToTable("DentistaTelefone","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Orcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Aprovado");

                    b.Property<Guid?>("DentistaId");

                    b.Property<Guid>("PacienteId");

                    b.Property<bool>("Rascunho");

                    b.Property<int>("Status");

                    b.Property<string>("Tratamento");

                    b.HasKey("Id");

                    b.HasIndex("DentistaId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Orcamento","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.OrcamentoComentario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comentario");

                    b.Property<Guid>("OrcamentoId");

                    b.HasKey("Id");

                    b.HasIndex("OrcamentoId");

                    b.ToTable("OrcamentoComentario","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.OrcamentoDentesRemovido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Dente");

                    b.Property<Guid>("OrcamentoId");

                    b.HasKey("Id");

                    b.HasIndex("OrcamentoId");

                    b.ToTable("OrcamentoDentesRemovido");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.OrcamentoProcedimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("DentistaId");

                    b.Property<string>("Descricao");

                    b.Property<string>("Observacao");

                    b.Property<Guid>("OrcamentoId");

                    b.Property<Guid>("ProcedimentoId");

                    b.HasKey("Id");

                    b.HasIndex("DentistaId");

                    b.HasIndex("OrcamentoId");

                    b.HasIndex("ProcedimentoId");

                    b.ToTable("OrcamentoProcedimento","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataCadastro");

                    b.Property<DateTime?>("DataNascimento");

                    b.Property<int>("Genero");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(180);

                    b.HasKey("Id");

                    b.ToTable("Paciente","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.PacienteTelefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("PacienteId");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("PacienteTelefone","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Procedimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Categoria");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Imagem");

                    b.Property<decimal>("Valor");

                    b.HasKey("Id");

                    b.ToTable("Procedimento","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.ProcedimentoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ProcedimentoId");

                    b.Property<int>("TipoComissao");

                    b.Property<Guid>("UsuarioId");

                    b.Property<decimal>("Valor");

                    b.Property<DateTime?>("VigenciaFinal");

                    b.Property<DateTime>("VigenciaInicial");

                    b.HasKey("Id");

                    b.HasIndex("ProcedimentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ProcedimentoUsuario","dev");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClinicaId");

                    b.Property<int>("Grupo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(180);

                    b.Property<string>("Senha")
                        .HasMaxLength(180);

                    b.HasKey("Id");

                    b.HasIndex("ClinicaId");

                    b.ToTable("Usuario","public");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.UsuarioTelefone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioTelefone","public");
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Auditoria", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Auditorias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Clinica", b =>
                {
                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ClinicaId");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(180);

                            b1.HasKey("ClinicaId");

                            b1.ToTable("Clinica","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Clinica")
                                .WithOne("Email")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Email", "ClinicaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("ClinicaId");

                            b1.Property<string>("Bairro")
                                .HasMaxLength(100);

                            b1.Property<string>("Cep")
                                .HasMaxLength(20);

                            b1.Property<string>("Cidade")
                                .HasMaxLength(100);

                            b1.Property<string>("Complemento")
                                .HasMaxLength(50);

                            b1.Property<string>("Estado")
                                .HasMaxLength(100);

                            b1.Property<string>("Logradouro")
                                .HasMaxLength(200);

                            b1.Property<string>("Numero");

                            b1.Property<string>("Pais")
                                .HasMaxLength(100);

                            b1.HasKey("ClinicaId");

                            b1.ToTable("Clinica","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Clinica")
                                .WithOne("Endereco")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Endereco", "ClinicaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Periodo", "Periodo", b1 =>
                        {
                            b1.Property<Guid>("ClinicaId");

                            b1.Property<DateTime?>("Final")
                                .HasColumnName("FinalUso");

                            b1.Property<DateTime>("Inicial")
                                .HasColumnName("InicioUso");

                            b1.HasKey("ClinicaId");

                            b1.ToTable("Clinica","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Clinica")
                                .WithOne("Periodo")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Periodo", "ClinicaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.ClinicaTelefone", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Clinica", "Clinica")
                        .WithMany("ClinicaTelefones")
                        .HasForeignKey("ClinicaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("ClinicaTelefoneId");

                            b1.Property<string>("Numero");

                            b1.Property<string>("Regiao");

                            b1.Property<string>("Tipo");

                            b1.HasKey("ClinicaTelefoneId");

                            b1.ToTable("ClinicaTelefone","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.ClinicaTelefone")
                                .WithOne("Telefone")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Telefone", "ClinicaTelefoneId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Dentista", b =>
                {
                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("DentistaId");

                            b1.Property<string>("NRegistro")
                                .HasMaxLength(180);

                            b1.Property<int>("Tipo");

                            b1.HasKey("DentistaId");

                            b1.ToTable("Dentista","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Dentista")
                                .WithOne("Documento")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Documento", "DentistaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("DentistaId");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(180);

                            b1.HasKey("DentistaId");

                            b1.ToTable("Dentista","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Dentista")
                                .WithOne("Email")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Email", "DentistaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("DentistaId");

                            b1.Property<string>("Bairro")
                                .HasMaxLength(100);

                            b1.Property<string>("Cep")
                                .HasMaxLength(20);

                            b1.Property<string>("Cidade")
                                .HasMaxLength(100);

                            b1.Property<string>("Complemento")
                                .HasMaxLength(50);

                            b1.Property<string>("Estado")
                                .HasMaxLength(100);

                            b1.Property<string>("Logradouro")
                                .HasMaxLength(200);

                            b1.Property<string>("Numero");

                            b1.Property<string>("Pais")
                                .HasMaxLength(100);

                            b1.HasKey("DentistaId");

                            b1.ToTable("Dentista","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Dentista")
                                .WithOne("Endereco")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Endereco", "DentistaId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.DentistaTelefone", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Dentista")
                        .WithMany("Telefones")
                        .HasForeignKey("DentistaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("DentistaTelefoneId");

                            b1.Property<string>("Numero");

                            b1.Property<string>("Regiao");

                            b1.Property<string>("Tipo");

                            b1.HasKey("DentistaTelefoneId");

                            b1.ToTable("DentistaTelefone","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.DentistaTelefone")
                                .WithOne("Telefone")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Telefone", "DentistaTelefoneId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Orcamento", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Dentista", "Dentista")
                        .WithMany()
                        .HasForeignKey("DentistaId");

                    b.HasOne("DominiosRicos.Dominio.Entidades.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Periodo", "Periodo", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoId");

                            b1.Property<DateTime?>("Final");

                            b1.Property<DateTime>("Inicial");

                            b1.HasKey("OrcamentoId");

                            b1.ToTable("Orcamento","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Orcamento")
                                .WithOne("Periodo")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Periodo", "OrcamentoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.OrcamentoComentario", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Orcamento", "Orcamento")
                        .WithMany("OrcamentoComentarios")
                        .HasForeignKey("OrcamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Data", "Data", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoComentarioId");

                            b1.Property<DateTime?>("Date")
                                .HasColumnName("DataComentario");

                            b1.HasKey("OrcamentoComentarioId");

                            b1.ToTable("OrcamentoComentario","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.OrcamentoComentario")
                                .WithOne("Data")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Data", "OrcamentoComentarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Dente", "Dente", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoComentarioId");

                            b1.Property<int>("Posicao");

                            b1.Property<int>("Quadrante");

                            b1.Property<int>("Tipo");

                            b1.HasKey("OrcamentoComentarioId");

                            b1.ToTable("OrcamentoComentario","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.OrcamentoComentario")
                                .WithOne("Dente")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Dente", "OrcamentoComentarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.OrcamentoDentesRemovido", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Orcamento", "Orcamento")
                        .WithMany("OrcamentoDentesRemovidos")
                        .HasForeignKey("OrcamentoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.OrcamentoProcedimento", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Dentista", "Dentista")
                        .WithMany()
                        .HasForeignKey("DentistaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominiosRicos.Dominio.Entidades.Orcamento", "Orcamento")
                        .WithMany("OrcamentoProcedimentos")
                        .HasForeignKey("OrcamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominiosRicos.Dominio.Entidades.Procedimento", "Procedimento")
                        .WithMany()
                        .HasForeignKey("ProcedimentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Dente", "Dente", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoProcedimentoId");

                            b1.Property<int>("Posicao");

                            b1.Property<int>("Quadrante");

                            b1.Property<int>("Tipo");

                            b1.HasKey("OrcamentoProcedimentoId");

                            b1.ToTable("OrcamentoProcedimento","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.OrcamentoProcedimento")
                                .WithOne("Dente")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Dente", "OrcamentoProcedimentoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Periodo", "Periodo", b1 =>
                        {
                            b1.Property<Guid>("OrcamentoProcedimentoId");

                            b1.Property<DateTime?>("Final");

                            b1.Property<DateTime>("Inicial");

                            b1.HasKey("OrcamentoProcedimentoId");

                            b1.ToTable("OrcamentoProcedimento","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.OrcamentoProcedimento")
                                .WithOne("Periodo")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Periodo", "OrcamentoProcedimentoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Paciente", b =>
                {
                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Documento", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("PacienteId");

                            b1.Property<string>("NRegistro");

                            b1.Property<int>("Tipo");

                            b1.HasKey("PacienteId");

                            b1.ToTable("Paciente","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Paciente")
                                .WithOne("Cpf")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Documento", "PacienteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Documento", "RegistroGeral", b1 =>
                        {
                            b1.Property<Guid>("PacienteId");

                            b1.Property<string>("NRegistro");

                            b1.Property<int>("Tipo");

                            b1.HasKey("PacienteId");

                            b1.ToTable("Paciente","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Paciente")
                                .WithOne("RegistroGeral")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Documento", "PacienteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("PacienteId");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(180);

                            b1.HasKey("PacienteId");

                            b1.ToTable("Paciente","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Paciente")
                                .WithOne("Email")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Email", "PacienteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("PacienteId");

                            b1.Property<string>("Bairro")
                                .HasMaxLength(100);

                            b1.Property<string>("Cep")
                                .HasMaxLength(10);

                            b1.Property<string>("Cidade")
                                .HasMaxLength(100);

                            b1.Property<string>("Complemento")
                                .HasMaxLength(50);

                            b1.Property<string>("Estado")
                                .HasMaxLength(100);

                            b1.Property<string>("Logradouro")
                                .HasMaxLength(180);

                            b1.Property<string>("Numero");

                            b1.Property<string>("Pais")
                                .HasMaxLength(100);

                            b1.HasKey("PacienteId");

                            b1.ToTable("Paciente","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Paciente")
                                .WithOne("Endereco")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Endereco", "PacienteId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.PacienteTelefone", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Paciente")
                        .WithMany("PacienteTelefones")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("PacienteTelefoneId");

                            b1.Property<string>("Numero");

                            b1.Property<string>("Regiao");

                            b1.Property<string>("Tipo");

                            b1.HasKey("PacienteTelefoneId");

                            b1.ToTable("PacienteTelefone","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.PacienteTelefone")
                                .WithOne("Telefone")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Telefone", "PacienteTelefoneId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Procedimento", b =>
                {
                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Comissao", "Comissao", b1 =>
                        {
                            b1.Property<Guid>("ProcedimentoId");

                            b1.Property<int>("Tipo");

                            b1.Property<decimal>("Valor");

                            b1.HasKey("ProcedimentoId");

                            b1.ToTable("Procedimento","dev");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Procedimento")
                                .WithOne("Comissao")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Comissao", "ProcedimentoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.ProcedimentoUsuario", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Procedimento", "Procedimento")
                        .WithMany()
                        .HasForeignKey("ProcedimentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominiosRicos.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Clinica", "Clinica")
                        .WithMany("Usuarios")
                        .HasForeignKey("ClinicaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Documento", "Documento", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId");

                            b1.Property<string>("NRegistro")
                                .HasMaxLength(180);

                            b1.Property<int>("Tipo");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Usuario")
                                .WithOne("Documento")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Documento", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(180);

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Usuario")
                                .WithOne("Email")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Email", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("UsuarioId");

                            b1.Property<string>("Bairro")
                                .HasMaxLength(100);

                            b1.Property<string>("Cep")
                                .HasMaxLength(20);

                            b1.Property<string>("Cidade")
                                .HasMaxLength(100);

                            b1.Property<string>("Complemento")
                                .HasMaxLength(50);

                            b1.Property<string>("Estado")
                                .HasMaxLength(100);

                            b1.Property<string>("Logradouro")
                                .HasMaxLength(200);

                            b1.Property<string>("Numero");

                            b1.Property<string>("Pais")
                                .HasMaxLength(100);

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuario","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.Usuario")
                                .WithOne("Endereco")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Endereco", "UsuarioId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DominiosRicos.Dominio.Entidades.UsuarioTelefone", b =>
                {
                    b.HasOne("DominiosRicos.Dominio.Entidades.Usuario")
                        .WithMany("UsuarioTelefones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DominiosRicos.Dominio.ValueObjects.Telefone", "Telefone", b1 =>
                        {
                            b1.Property<Guid>("UsuarioTelefoneId");

                            b1.Property<string>("Numero");

                            b1.Property<string>("Regiao");

                            b1.Property<string>("Tipo");

                            b1.HasKey("UsuarioTelefoneId");

                            b1.ToTable("UsuarioTelefone","public");

                            b1.HasOne("DominiosRicos.Dominio.Entidades.UsuarioTelefone")
                                .WithOne("Telefone")
                                .HasForeignKey("DominiosRicos.Dominio.ValueObjects.Telefone", "UsuarioTelefoneId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
